<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>deirdre.dev</title><description>macOS, iOS &amp; Apple technologies software engineer</description><link>https://deirdre.dev</link><language>en</language><lastBuildDate>Mon, 20 Jun 2022 20:48:08 -0700</lastBuildDate><pubDate>Mon, 20 Jun 2022 20:48:08 -0700</pubDate><ttl>250</ttl><atom:link href="https://deirdre.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://deirdre.dev/posts/publish-is-live</guid><title>Publish is Live</title><description>After life got a table flip last year, finally got back to migrating this site.</description><link>https://deirdre.dev/posts/publish-is-live</link><pubDate>Sun, 19 Jun 2022 21:27:00 -0700</pubDate><content:encoded><![CDATA[<h1>Publish Is Live</h1><p>Last year I was almost done migrating this site. My father took a turn for the worse (and died), so lots of life this past year has been about things other than technical blogs.</p><p>Anyhow, this site has been migrated from Jekyll (ruby) to <a href="https://github.com/johnsundell/Publish">Publish, a static site generator written in Swift</a>.</p><p>The theme is from <a href="https://html5up.net/solid-state">HTML5Up</a>, and I will write about the process of migration, not to mention which parts of migrating that particular theme were challenging and what I learned in the process. I will also release my version of the theme, just not immediately. Now that I have a working copy, I want to pare down an example and create a new repository for that.</p><p>After, I may incorporate some of the <a href="https://pixelarity.com/solid-state">changes in the Pixelarity version of the theme.</a> and diverge my site further from the free theme.</p><h2>Publish Theme Development Tips</h2><p>Since I've just ported the theme I was using in Jekyll to Publish, I thought I'd mention a few tips I have for what makes a theme easier or more difficult to port.</p><h2>Index and Posts Focused</h2><p>Publish is very much designed around the paradigm that the site consists of:</p><ul><li>A front page, which has a different format</li><li>Other pages, which may be in sections, which have an amorphous format</li><li>Posts, which may have tags, and are dated (once published)</li><li>Pages for each tag and a tag index</li></ul><p>This basically follows the early WordPress concept of sites (except WordPress used categories instead of tags). So if your site format follows that generally, Publish will be easier to adapt, especially given how few themes are currently available that showcase more complex formats.</p><p>In the early days, people mostly used pages to create silos (portions of a website that link within that category, but mimize outside links, as this increases relevance on that one topic, and thus ranking—that was the theory, anyway).</p><h2>Some Common Formats That Are More Work</h2><p>One-page themes, especially those with multiple different kinds of feature blocks, each with its own content, are harder to do. The way Jekyll does these is to have the content in each feature block be in a separate Markdown file, then have those render into the feature blocks that comprise the page. Often, there's metadata in front that orders the sections.</p><p>Or, the other way Jekyll does it is to load the next block based on <a href="https://jekyllrb.com/docs/liquid/tags/">{% liquid tags %}</a>, which Publish doesn't support. But that means you can put almost any arbitrary thing dynamically on a page. While that has some cool aspects, it does mean your Markdown gets a lot more complex.</p><p>There's always the ugly hack (which I have in fact done)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/month-with-publish</guid><title>A Month With Publish</title><description>Here's an update on the site conversion and how it's going.</description><link>https://deirdre.dev/posts/month-with-publish</link><pubDate>Mon, 17 May 2021 11:26:00 -0700</pubDate><content:encoded><![CDATA[<p>First of all, <a href="https://github.com/JohnSundell/Plot">John Sundell's added another syntax to Plot (and therefore Publish)</a>. For those of you familiar with SwiftUI, it'll be a lot more familiar than the earlier syntax would have been. I'm finding it easier to wrap my head around, partly because I've already done the work with SwiftUI, so I've built up those instincts.</p><p><a href="https://html5up.net/solid-state">This theme I'm using</a>, which I want to keep, is pretty fancy and has several wrapper layers for spacing and things. This makes it more complex to convert. Worse, I'm doing it at night when I'm fading, sometimes with a migraine, and…it's just slower than I'd hoped. :P</p><p>I could have picked something simpler, but it wouldn't have been "my" site if I'd done that.</p><p>Because Solid State (the theme I'm using) is an open source theme, when I'm done converting it for my own purposes, I'm planning to make it available as a Publish theme.</p><p>So here are a few of my thoughts about Publish:</p><ol><li>The project's well organized.</li><li>There are tests. Lots of tests. This is great, as sometimes the tests are the only extant documentation on some problem I wanted to solve.</li><li>I found it hard to wrap my head around how to write a template theme, a la <a href="https://github.com/sowenjub/CasperishTheme">Casperish</a>, because what belonged on the "instance" side vs. what belonged on the "template" side was sometimes confusing to me, especially as Casperish only comes with the "template" side available to view. So my solution was: I'm going to Just Write™ Solid State's Swift version, try to make it as correct as possible, then peel off a template version when it's gelled a bit more.</li><li>In particular, one of the things I don't really quite understand how to do in Publish that's <a href="https://html5up.net/solid-state">necessary for this theme is the "feature" section at the bottom of the home page</a> and <a href="https://html5up.net/solid-state">also available on other pages and items</a>. That strikes me as setting up a whole new hierarchy, e.g., features, then picking from the features based on tags. Then, instead of generating the whole page HTML, generate a partial for the feature and slap it on however many pages.</li></ol><p>You'll note I'm not using those features on this existing site, either, and that's really just because I hadn't figured out exactly what I wanted to do there yet. Ultimately, I wanted to include projects, but until I get more of them out there, I dunno. Humor, maybe?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/wrestling-with-publish</guid><title>Wrestling With Publish</title><description>I've been working on converting this site from Jekyll to Publish, and here's a few cool sites I've found so far.</description><link>https://deirdre.dev/posts/wrestling-with-publish</link><pubDate>Sat, 17 Apr 2021 11:26:00 -0700</pubDate><content:encoded><![CDATA[<p>There's a saying in web dev: when you hit a wall, start or redesign a site.</p><p>While I like Jekyll, I've found that, because I no longer spend my days in TextMate, I don't <em>think</em> about my website frequently. It's a habit thing.</p><p>So I've been looking into Publish (given that I live in Xcode), and there's really very little information about how to build your own site theme if it needs anything more than the most basic of website function.</p><p>Also, while Markdown is fantastic for laying out prose <em>within</em> a document, it doesn't represent the semantic parts of a page newly available in HTML5 (e.g., article, figure, figcaption, header, footer, nav, section) that help accessibility as well as search engines. Granted, Publish does have at least most of those, but you'd have to create code to inject them into your page.</p><h2>Themes</h2><p>Publish developer John Sundell suggested that everyone write their own theme for their site. While, yes, that is ideal (with limitations), having at least one medium complex good example can really help speed up a first implementation.</p><p>Here are the ones that were most useful, with commentary.</p><ul><li><a href="https://github.com/sowenjub/CasperishTheme">Casperish port of Ghost's Casper theme by sowenjub and aure.</a> This isn't strictly a Publish theme, though, because of the extras it brings in, but some of how it solves some issues are worth looking at. One notable downside is the utter lack of tests. <a href="https://paraside.in">Deployed site here.</a> One of the technically interesthing things is that there's a protocol for the theme, rather than the usual way of just having the struct conform to Website, it also has to conform to CasperishWebsite.</li><li><a href="https://github.com/Goosse/SearaPublishTheme">Radio Seara by Goosse.</a> New theme with <a href="https://radioseara.fm">deployed site here</a>. Reasonably simple, but clean looking. Love the aesthetic of it! (No tests, though.)</li><li><a href="https://github.com/CoolONEOfficial/personal_site">CoolOneOfficial's personal site theme</a> has nice layered metadata handling. <a href="https://coolone.ru">Deployed here</a> (in Russian). Site also uses several plugins, which may be useful. And no tests.</li><li><a href="https://github.com/pvzig/bytesized.co/">pvzig's theme swaps out Sundell's Markdown parser for Common Mark.</a> <a href="https://www.bytesized.co">Site is deployed here.</a> I really like the grey/green combo. No tests.</li><li><a href="https://github.com/yusufozgul/yusufozgul.com">Yusuf Özgül's theme for his site</a>, which is mostly in Turkish. Despite the relatively simple theme, he's got a fairly intricate set of conditionals, which may help you sort out how to write your own theme. No tests. Also interesting is a loader class that creates the static pages of the site.</li><li><a href="https://github.com/billdonner/BandSite">Bill Donner has written several band sites with variants on his theme.</a> And, guess what? There are tests! o/ Seriously, folks, John Sundell's got an excellent test suite for Publish and its dependencies, and y'all should take the time to level up on tests.</li><li><a href="https://github.com/Demacia5635/demacia5635.github.io">Demacia's theme is interesting in that it uses a lot of plugins and…wait for it…many are npm.</a> <a href="https://demacia5635.github.io">Site deployed here</a> for an Israeli robot club. No tests (again).</li><li><a href="https://github.com/leontedev/Publish-leonte.dev">Leonte.dev's theme</a> has some custom publishing steps, including rewriting. <a href="https://www.leonte.dev">Deployed here.</a> No tests.</li><li><a href="https://github.com/crelies/christianelies.de">Christian Elies's theme</a> isn't particularly complex, but the way the meta data and tags are broken out is very orderly. Also has some nice examples of how to do card elements on a page. No tests.</li><li><a href="https://github.com/weissazool/weissazool">Weissazool has a minimalist photo blog theme.</a> <a href="https://weissazool.github.io/">Deployed here.</a> Not super duper different than the default, but a nice example of image and post together and how to do that. No tests.</li><li><a href="https://github.com/joeblau/blau-theme/">Joe Blau's got a really old skool retro theme that is very winning at the end.</a> It's the kind of site you can make when you know your experience and chops are so good that you can just…retro it. <a href="https://joeblau.com">Deployed here.</a> No tests.</li><li><a href="https://github.com/fatbobman/PublishThemeForFatbobmanBlog">Fatbobman's theme isn't super revolutionary, but there are some interesting plugins written for it.</a> <a href="https://www.fatbobman.com">Deployed here</a> (note: site's in Chinese, and so are the code comments). No tests.</li><li><a href="https://github.com/nitesuit/Blog">Several people have used a variant of this theme; the earliest version I found was from Lithuanian dev Povilas Staškus.</a> <a href="https://www.staskus.io">It's a really nice clean-looking theme, deployed here</a>. No tests.</li><li><a href="https://github.com/sharpfive/oliva">Oliva isn't a theme in the traditional sense.</a> It instead generates fantasy baseball team game data. It does use Publish, though, and it uses it in an interesting way. No tests.</li></ul><p>Others:</p><ul><li><a href="https://github.com/sanengineer/san-publish-theme">SanTheme</a>, though I couldn't find a deployed site. No tests.</li><li><a href="https://github.com/SwiftVietnam/SwiftVietnam">SwiftVietnam's theme</a>, deployed at <a href="https://swiftvietnam.com">SwiftVietnam.com</a>. Basic Foundation-style theme, but may be of interest to Vietnamese readers. No tests.</li><li><a href="https://github.com/mastermakrela/JustABunchOfGrapes">Just a Bunch of Grapes</a> has some interesting metadata, but I didn't see it deployed anywhere. No tests.</li></ul><p>So…1 out of 17 had tests.</p><h2>Why No, I haven't Said Enough On That Topic</h2><p>Seriously, John Sundell's done an excellent job of making tests easy to understand and write.</p><p>Here's one of the stylesheet tests:</p><pre><code>     <span class="keyword">func</span> testCSSStylesheet() {
        <span class="keyword">let</span> html = <span class="type">HTML</span>(.<span class="call">head</span>(.<span class="call">stylesheet</span>(<span class="string">"styles.css"</span>)))
        <span class="call">assertEqualHTMLContent</span>(html, <span class="string">"""
        &lt;head&gt;&lt;link rel="stylesheet" href="styles.css" type="text/css"/&gt;&lt;/head&gt;
        """</span>)
    }
</code></pre><p>It will help you when you (almost inevitably) want to refactor later.</p><h2>Did I Leave You Out?</h2><p>I have looked at <em>a ton</em> of Publish sites over the last couple of weeks, enough so that my eyes melted more than once. ;)</p><p>Generally, I was looking for something specific, so if I didn't see it, I may not have kept that tab open long enough to get around to writing this post. Also, I only looked on Github, so those hosting their themes on Gitlab or other platforms were left out.</p><p>Please feel free to ping me if you've got a site that you think shows some interesting use of Publish, especially if it has tests. I'm mostly interested in one of two kinds of sites:</p><ol><li>Sites that have more complex markup, e.g., a port of a commercial-quality theme like those found at <a href="https://HTML5Up.net">HTML5Up.net</a>. (I'm currently working on <a href="https://html5up.net/solid-state">Solid State</a>, thus wanted to find more examples on that order of complexity.)</li><li>Sites that are using plugins or unusual publishing pipelines. However, apart from the single example above, sites that use JS steps need not apply.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/swiftuijam-experience</guid><title>The SwiftUIJam Experience</title><description>Went to my first SwiftUI jam, here's what happened.</description><link>https://deirdre.dev/posts/swiftuijam-experience</link><pubDate>Sun, 21 Feb 2021 12:26:00 -0800</pubDate><content:encoded><![CDATA[<p>Searching for Jam ideas is always interesting. You need something that can reasonably be done in 2-3 days, but also need something you can <em>show</em>. Plus, people have lives and things come up. (Or, as you'll hear shortly, can be literally flung up.)</p><p>I went through some of the listings of APIs over on <a href="https://www.programmableweb.com">Programmable Web</a> to see if any ideas stuck.</p><p><a href="http://api.artic.edu/docs/">The Art Institute of Chicago has a fantastic API.</a> It's unfortunately so rich that it's not particularly well documented, though it does offer elastic search. One of the parameters offered is color, which I thought, "Huh, what if you could search based on color?"</p><p>Spoiler alert: It turns out you can't search on color (or colorfulness, another parameter). <em>heavy sigh</em></p><p>I did find someone on GitHub had essentially looked at and abandoned the same approach.</p><p>That was one full day. :P</p><h2>Day Two</h2><p>So, let's suck a bunch of data in, overfetching, then filter client side, right?</p><p>I'm trying to plan this as my cat Lily is literally flinging a bird around in the back yard. Yes, an actual bird. <em>facepalm</em></p><p>Meanwhile, Tianna has gotten a nice couple of screens done despite having a super busy weekend.</p><p>Pete, team lead has gotten some work done too.</p><p>By midnight, I had the JSON sucking written (on a background thread), I was just trying to figure out where made the most sense to hook it up. Lots of people do it in the .onAppear, which seems too late for an API that may need multiple calls. I'd been working in document applications on macOS, where the data suck is tied to the opening of the document, but this wasn't the same paradigm, so I needed to think about where made sense. Historically, things like CoreData were instantiated from the AppDelegate (or, more commonly, something invoked by the AppDelegate) before the rest of the app was launched.</p><p>In SwiftUI 2.0, though, the equivalent of an AppDelegate is…a view.</p><p>I was tired, so I deferred it for the next morning.</p><h2>Day Three</h2><p>I've just finished breakfast and am about to write more code when we get the familiar "Do you have a cat named Lily?" phone call. (Number 35 in a series. Seriously. <a href="https://deirdre.dev/assets/images/2020/11/lily-the-cat.jpg">ObCatTax</a>)</p><p>Long story short, didn't get everything I wanted to do done, then realized it'd have been better in CoreData anyway. I'd been avoiding that because it seemed like it might add complexity, but I think ultimately it'd have reduced it (partly because I've been working in it more of late).</p><h2>A Few Comments</h2><p>Based on a few things I saw:</p><ol><li>One of the hardest concepts in SwiftUI is how much everything-is-a-struct affects everything that flows from there. You can occasionally just add one more layer in your layout and…suddenly the compiler's complaining about something that was a var now being a const. Once your layouts start getting more complex, you can hit the wall fairly easily, especially if you're not yet practiced enough to know where and how to simplify. Why no, I didn't spend <em>embarrassingly long time interval</em> on this recently. Nope.</li><li>Make sure the repo owner knows how to grant access. (I had to look it up, as I've submitted pull requests before, but not managed a multi-dev repo that I started from scratch.)</li><li>When you've got a group project that has newer people on it who may not have submitted commits or pull requests to multi-dev repositories before, make sure they know how to check out a repo so they don't create a new one and try to commit that. It's a very easy mistake to download (rather than checkout) a repo. I've done this before, but not everyone will know what to do.</li><li>Understand the repo before committing. I saw a few cases of confusion; different devs will have different naming conventions in mind (especially when you're talking devs from different continents who may not be native English speakers.) This is hard, especially in an established repo, and it's one reason I haven't been submitting as many pull requests as I'd like.</li><li>Smaller commits are better. This is almost always true anyway, but especially in a small project on a short deadline.</li></ol><p>It'd have been helpful to get people's GitHub experience up front, because some of these I hadn't thought about deeply before. While I'm not new to git, I'm relatively new to GitHub, and it has its own quirks.</p><h2>A Comedy Wrapup</h2><ol><li>The #iOSDevHappyHour took place on Saturday afternoon, and <a href="https://twitter.com/rungxanh2901/status/1363283240455450626">shoutout to the guy painting his ceiling during the meetup</a>. You go, Mitch!</li></ol><ol start="2"><li><a href="https://deirdre.dev/assets/images/2021/02/not-so-greedy-GeometryReader.png">GeometryReader inside a LazyVGrid can be hilarious</a> if you're thinking you can use it to set an item's size. Width was fine, height not so much.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/swift-problem</guid><title>The Swift Problem</title><description>How much deeper-level understanding do we really need?</description><link>https://deirdre.dev/posts/swift-problem</link><pubDate>Fri, 29 Jan 2021 12:26:00 -0800</pubDate><content:encoded><![CDATA[<p>Over on reddit, <a href="https://www.reddit.com/r/swift/comments/l78v5u/c_developers_gone_swift_do_you_notice_a_gap_in/">there's a thread on r/swift aimed at people who are C coders</a>. It asks the following questions:</p><ol><li>Do you notice a gap in understanding memory management and low level concepts amongst Swift developers?</li><li>Do most Swift developers pay attention to their code quality and how it pans out to performance?</li></ol><p>As someone who's done a lot of C coding (though not in quite a while): yes and no, respectively.</p><p>However, I don't think this is unique to Swift, nor is it more of a problem in Swift.</p><p>Case in point… <em>opens a web page</em>.</p><p>Now this is a web page that reproducibly, <em>once it has rendered</em>, continues to use 16-32% CPU for as long as the page is open, unless I minimize the tab. It's also using 116 MB of memory, even when minimized, growing to 167 MB once it's brought back to the front.</p><p>There is nothing special about this web page: it's basically your bog standard landing page with sections: four large links across the top, one long bar beneath them linking to a different page, and then several sections with links. It's a WordPress blog (so, written in PHP). Yet, most WordPress blogs, while large, aren't like this.</p><p>What makes the difference?</p><h3>Programming in Ye Olden Dayz</h3><p>Before I get into the answer, let me point out that I started developing for the Mac in 1986, back when all code had to be stuffed, chunk-wise, into 32k (not megs, k) chunks into the resource fork, and any calls outside of the current chunk had to use a long jump instead of a regular jump. And you had to know which was which at all times, as well as keep track of what, precisely, was/wasn't loaded so you didn't just jump into the void and crash the entire machine.</p><p>No pressure. :)</p><p>So I find the concept that someone would write a purportedly helpful web page that consumes <em>so much</em> CPU and memory just…beyond all ken.</p><h3>The Answer</h3><p>Trackers and advertising and their crappy code is the answer.</p><p>Much has been made lately about <a href="https://www.bbc.com/news/technology-56012952">how much energy Bitcoin's consuming</a>, but I notice no one's tackling how much global energy advertising and tracking is consuming.</p><p>I'm not going to hold my breath, either, because the very people who might report on it are some of the companies using some of the worst offenders.</p><h3>Part of the Reason</h3><p>My husband (<a href="http://linuxmafia.com">Rick Moen</a>) has a saying: "If you're not the customer, you're the product." The problem with things like trackers and ads is: you're not the customer, so they're not optimized <em>for you</em>. (Arguably, the ones I'm talking about aren't optimized for the actual customer either, but that's another story.)</p><p>Companies install them because of features, and wanting to know certain things. Those things are hard without JavaScript (which, btw, try browsing with JavaScript turned off for a day, quite illuminating). And it's entirely too easy to get into trouble with bad JS. Which isn't a language problem. It's a quality problem.</p><h3>"The Web Is an Error Condition"</h3><p>The above quote is from one of my former coworkers, and it's apt. Web pages render despite broken HTML, CSS, and JavaScript, so there's little incentive for the average person to do a better job, or for the average tool to become more efficient.</p><p>But people think Swift is a problem.</p><p>Okay then.</p><p>At least we have a compiler that checks for errors. :P</p><p>Not every problem needs to be solved by every developer. <em>*cough</em>* sort algorithms <em>*cough</em>*</p>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/penrose-tiling</guid><title>Penrose Tiling in Swift</title><description>Penrose Tiling in Swift, command-line edition</description><link>https://deirdre.dev/posts/penrose-tiling</link><pubDate>Fri, 15 Jan 2021 16:09:00 -0800</pubDate><content:encoded><![CDATA[<p>Command-line implementation of <a href="https://rosettacode.org/wiki/Penrose_tiling">Penrose tiling</a> in Swift. Translated mostly from the Go and Java versions.</p><p><a href="https://preshing.com/20110831/penrose-tiling-explained/">Great explainer on Penrose tiling.</a></p><div class="12u image-wrapper" aria-label="Penrose Tiling in Swift"><span class="image fit">
  <figure class="image">

    <a href="https://deirdre.dev/assets/images/2021/01/penrose_tiling.png" title="Penrose Tiling in Swift" target="_blank">

        <img src="https://deirdre.dev//assets/images/2021/01/penrose_tiling.png" alt="Penrose Tiling in Swift" />
    </a>
      <figcaption>A fun little experiment</figcaption>

  </figure>
</span></div><h2>Reddit r/Swift Thread</h2><p><a href="https://www.reddit.com/r/swift/comments/kwdj38/does_anyone_know_if_swifts_version_of_penrose/">Thread asking if there were any implementations in Swift here.</a></p><p><a href="https://gist.github.com/waterskier2007/4584bdd4c0b2f3f90e765b9a50747e48">Also nod to waterskier2007's UIKit version here.</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/unsupported-kvc-in-keypath</guid><title>Unsupported KVC in Keypath</title><description>I ran into a cryptic error with only two ten-year-old hits on Google. Here's why.</description><link>https://deirdre.dev/posts/unsupported-kvc-in-keypath</link><pubDate>Thu, 24 Dec 2020 11:29:00 -0800</pubDate><content:encoded><![CDATA[<p>Yesterday, I ran into a cryptic error message in Xcode, and there were only two ten-year-old hits on Google.</p><p><code>Unsupported KVC aggregate in keypath</code></p><p>So, in case future you runs into this problem, here's another, different cause.</p><p>The short version was that I was trying to do an NSPredicate comparison for Core Data, meaning ==, and I'd accidentally typed = instead. I'd been working in SQL earlier in the day where = is used as a comparison operator, so an easy mistake to make in context.</p><p>So:</p><pre><code>  <span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"id = %i"</span>, buildingData.<span class="property">id</span>)
</code></pre><p>…instead of:</p><pre><code><span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"id == %i"</span>, buildingData.<span class="property">id</span>)
</code></pre><p>It was initially confusing because I wasn't specifically trying to aggregate anything, but Xcode was clearly confused about what, exactly, I was trying to do.<br>Hope this helps!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/migrating-to-jekyll</guid><title>Migrating to Jekyll</title><description>This site had a 2020 in migrating from WordPress (php-based dynamic site) to Jekyll (ruby-based static site generator). Let me tell you all about it.</description><link>https://deirdre.dev/posts/migrating-to-jekyll</link><pubDate>Sat, 31 Oct 2020 12:03:00 -0700</pubDate><content:encoded><![CDATA[<p>First of all, I don't think it's news to anyone that 2020 has, to be polite, sucked. I lost a good part of my productivity this year (for months!) to COVID-19.</p><p>Because it's most illustrative of the kind of thing I've had to recover from, here's one of the challenges I had when COVID was at its worst in late January: rooms changed shape. I don't mean a little bit. I mean <a href="https://en.wikipedia.org/wiki/Platonic_solid">what platonic solid they were: cube to dodecahedron</a>, for example. 🤮 The other was the wall suddenly sliding down the corridor away from me. While I was walking. 🤮</p><p>It's amazingly disconcerting not knowing how far walls, doors, floors are from you. I <em>knew</em> it was an illusion, and I knew I was ill and reported the symptom, but it was not of significant enough concern at that point to go to the ER. (This spatial distortion also happened in COVID-19 hospitalized and ICU patients on occasion, but sometimes they <em>didn't</em> know it was an illusion.)</p><h3>Thoughts on WordPress</h3><p>I wanted to move my site off WordPress, and managed to not have as good a backup as I'd hoped. I had a database backup that didn't import correctly, and I'd already canceled the hosting before double checking.</p><p>One of the things I relied on for my main site, which goes back to 1998, is that I'd converted it all to Markdown around 2006 when I first realized there were Markdown plugins for WordPress. Those plugins saved Markdown in a separate field and then the HTML-ified version in the main editing field.</p><p>Almost all third-party WordPress development on Markdown plugins stopped once Jetpack (an Automattic plugin) supported Markdown. Versions crept along, databases were converted from one major revision to the next.</p><p>I found that every time I'd log into my site to write a post, I'd spend enough time fussing with WordPress that I wouldn't actually <em>write the entries I went there for</em>. While WordPress had gotten out of my way oh so many years ago, now it was always in my way, and in very annoying ways. I stopped posting to my blog for over a year (extremely unusual).</p><h3>And Then There's Migration</h3><p>So I dumped my data, and then shut off my WordPress hosting. (Note: I knew better than to do this before the migration was final. I was just tired of the hassle, not to mention the cost.) I was unprepared for the annoyance of migration.</p><p>You see, the migration tools suck, and the import tools suck. The WordPress import tools have never imported images correctly, even from a WordPress export. That's just so broken.</p><p>And then I was hamstrung by something that's just…gobsmacking to me.</p><h3>The Markdown That Isn't</h3><p>First, let's look at a very simple WordPress post draft as it's being composed.</p><div class="12u$ image-wrapper" aria-label="WordPress Post Draft"><span class="image fit">
  <figure class="image">

    <a href="https://deirdre.dev/assets/images/2020/10/wordpress-post-draft.jpg" title="WordPress Post Draft" target="_blank">

        <img src="https://deirdre.dev//assets/images/2020/10/wordpress-post-draft.jpg" alt="WordPress Post Draft" />

    </a>


      <figcaption>WordPress editor window view of post being composed. Edited text reads: This is a new post, and my default is set to markdown.</figcaption>

  </figure>
</span></div><p>But here's how it's actually being stored in the database:</p><div class="12u$ image-wrapper" aria-label="WordPress Post Draft in MySQL"><span class="image fit">
  <figure class="image">

    <a href="https://deirdre.dev/assets/images/2020/10/wordpress-post-draft-db.jpg" title="WordPress Post Draft in MySQL" target="_blank">

        <img src="https://deirdre.dev//assets/images/2020/10/wordpress-post-draft-db.jpg" alt="WordPress Post Draft in MySQL" />

    </a>


      <figcaption>WordPress Post Draft in MySQL shows that this is HTML wrapped in comments, *not markdown*.</figcaption>

  </figure>
</span></div><p>In text format:</p><pre><code>&lt;-- wp:paragraph --&gt;

&lt;p&gt;<span class="type">This</span> <span class="keyword">is</span> a new post, and my <span class="keyword">default is set</span> to markdown.&lt;/p&gt;

&lt;-- wp:paragraph --&gt;
</code></pre><p>While putting HTML comments and paragraphs isn't <em>forbidden</em> in Markdown, of course, the idea that you'd <em>only</em> store garbage like that in lieu of the plain text you claimed to store is very much not only against the spirit of Markdown, but deceptive to one's customers.</p><h3>And Here We Are</h3><p>Despite all that, I did get the site migrated, and glad to be migrated. Looking forward to writing more, now that I won't be quite so annoyed by my blog any more. :P</p><h4><em>Photo Credit</em></h4><figcaption>Monarch Butterflies on tree branch in blue sky background, photo by JHVEPhoto/Depositphotos, used with permission</figcaption>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/color-sphere</guid><title>Color Sphere</title><description>One of a set of Swift projects I created to feed a database and use SceneKit and CoreML to evaluate colors.</description><link>https://deirdre.dev/posts/color-sphere</link><pubDate>Tue, 27 Oct 2020 21:01:00 -0700</pubDate><content:encoded><![CDATA[<p>A little project I did in Swift last year, partly to learn some things I hadn't ever worked with before: SceneKit, CoreML, and some 3D concepts.</p><p><a href="http://assets/videos/color-sphere-movie.mp4 "Color Spheres""><img src="http://assets/images/2020/10/color-sphere-still.jpg" alt="Color Spheres"/></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/visualizing-4d-in-three-dimensions</guid><title>Visualizing 4D in Three Dimensions</title><description>The cool quirks of trying to visualize four dimensions in three. After all, we are so used to visualizing three dimensions in two dimensions, but…four into three is quite a bit more difficult.</description><link>https://deirdre.dev/posts/visualizing-4d-in-three-dimensions</link><pubDate>Mon, 15 Apr 2019 20:46:00 -0700</pubDate><content:encoded><![CDATA[<p>A couple of weeks ago, I watched a YouTube video from Albert Hwang that talked about visualizing four dimensions by analogy with how we visualize three dimensions in two dimensions (e.g., a drawing of a three-dimensional object). Thirteen-minute video, includes closed captions. Enjoy!</p><p><a href="http://www.youtube.com/watch?v=x9_BG2q7XYw "Visualizing 4D in Three Dimensions""><img src="https://deirdre.dev/assets/images/2019/04/4d-in-3-dimensions.jpg" alt="Visualizing 4D in Three Dimensions Image"/></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://deirdre.dev/posts/swift-on-sundays-march-17-2019</guid><title>Swift on Sundays, March 17, 2019</title><description>Short entry about a Swift on Sundays episode featuring CreateML and CoreML and how to integrate them into your project.</description><link>https://deirdre.dev/posts/swift-on-sundays-march-17-2019</link><pubDate>Sun, 17 Mar 2019 20:46:00 -0700</pubDate><content:encoded><![CDATA[<p>For those who don't know about Swift on Sundays, it's a weekly feature (on Sundays, naturally) where Paul Hudson of Hacking With Swift builds a live app on YouTube, talking through his design choices as he makes them.</p><p>Today's revolves around machine learning, specifically CreateML.</p><p><a href="http://www.youtube.com/watch?v=x9_BG2q7XYw "Today's Swift on Sunday Project""><img src="http://img.youtube.com/vi/x9_BG2q7XYw/0.jpg" alt="CreateML Project"/></a></p><h3>"CreateML creates the models; CoreML consumes the models."</h3><p>Paul's created test JSON data about recommended sleep time, number of cups of coffee, etc. to use as testing and training data. When run through CreateML with root mean square to test it, the recommendations are off by a mere three minutes, so quite close. In some cases, you'd want to train more, but we're off onto making an app to use the model.</p><p>Paul talks about the difference between loadView and viewDidLoad. Start loading your view in <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview">loadView</a>, not <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621495-viewdidload">viewDidLoad</a>, but over and over he sees examples of people putting view loading code in the latter that shoud go in the former.</p><p>Overall, an interesting episode if you want to have a primer on machine learning and incorporating a simple example into an app.</p><p><a href="https://www.youtube.com/playlist?list=PLuoeXyslFTuZNAZKB3FAYqiJZKigjC3VG">The full Swift on Sundays playlist can be found here.</a></p>]]></content:encoded></item></channel></rss>